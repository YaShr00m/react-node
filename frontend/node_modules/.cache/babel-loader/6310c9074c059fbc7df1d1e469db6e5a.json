{"ast":null,"code":"var _jsxFileName = \"/app/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL;\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Проверка, если токен существует в localStorage\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      setIsAuthenticated(true);\n    }\n  }, []);\n  const login = async formData => {\n    try {\n      const response = await fetch(`${API_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Произошла ошибка при входе');\n      }\n      const data = await response.json();\n      localStorage.setItem('authToken', data.token); // Сохранение токена в localStorage\n      setIsAuthenticated(true);\n      return data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  };\n  const register = async formData => {\n    try {\n      const response = await fetch(`${API_URL}/register`, {\n        method: 'POST',\n        body: formData // Не устанавливайте заголовок Content-Type для FormData\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Произошла ошибка при регистрации');\n      }\n      return response; // Убедитесь, что возвращается объект Response\n    } catch (error) {\n      console.error('There was a problem with the fetch operation:', error);\n      throw error; // Перебрасываем ошибку дальше\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(AuthProvider, \"JkS3Meyzlj18m4l86SBr9YDqEkQ=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","API_URL","process","env","REACT_APP_API_URL","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","token","localStorage","getItem","login","formData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","error","data","setItem","console","register","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/app/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // Проверка, если токен существует в localStorage\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    const login = async (formData) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/login`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(formData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.error || 'Произошла ошибка при входе');\r\n            }\r\n\r\n            const data = await response.json();\r\n            localStorage.setItem('authToken', data.token); // Сохранение токена в localStorage\r\n            setIsAuthenticated(true);\r\n            return data;\r\n        } catch (error) {\r\n            console.error('Login error:', error);\r\n            throw error;\r\n        }\r\n    };\r\n\r\n    const register = async (formData) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/register`, {\r\n                method: 'POST',\r\n                body: formData, // Не устанавливайте заголовок Content-Type для FormData\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                throw new Error(errorData.error || 'Произошла ошибка при регистрации');\r\n            }\r\n\r\n            return response; // Убедитесь, что возвращается объект Response\r\n        } catch (error) {\r\n            console.error('There was a problem with the fetch operation:', error);\r\n            throw error; // Перебрасываем ошибку дальше\r\n        }\r\n    };\r\n\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('authToken');\r\n        setIsAuthenticated(false);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, login, register, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useAuth() {\r\n    return useContext(AuthContext);\r\n}\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAC7C,MAAMC,WAAW,gBAAGX,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASY,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACvC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7DE,SAAS,CAAC,MAAM;IACZ;IACA,MAAMc,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIF,KAAK,EAAE;MACPD,kBAAkB,CAAC,IAAI,CAAC;IAC5B;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAC9B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,OAAO,QAAQ,EAAE;QAC7CiB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;MACjC,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,4BAA4B,CAAC;MACpE;MAEA,MAAMC,IAAI,GAAG,MAAMZ,QAAQ,CAACS,IAAI,CAAC,CAAC;MAClCb,YAAY,CAACiB,OAAO,CAAC,WAAW,EAAED,IAAI,CAACjB,KAAK,CAAC,CAAC,CAAC;MAC/CD,kBAAkB,CAAC,IAAI,CAAC;MACxB,OAAOkB,IAAI;IACf,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZG,OAAO,CAACH,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACf;EACJ,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAOhB,QAAQ,IAAK;IACjC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGhB,OAAO,WAAW,EAAE;QAChDiB,MAAM,EAAE,MAAM;QACdE,IAAI,EAAEL,QAAQ,CAAE;MACpB,CAAC,CAAC;MAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;QACd,MAAMC,SAAS,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,KAAK,IAAI,kCAAkC,CAAC;MAC1E;MAEA,OAAOX,QAAQ,CAAC,CAAC;IACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;MACZG,OAAO,CAACH,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACrE,MAAMA,KAAK,CAAC,CAAC;IACjB;EACJ,CAAC;EAGD,MAAMK,MAAM,GAAGA,CAAA,KAAM;IACjBpB,YAAY,CAACqB,UAAU,CAAC,WAAW,CAAC;IACpCvB,kBAAkB,CAAC,KAAK,CAAC;EAC7B,CAAC;EAED,oBACIV,OAAA,CAACK,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAE;MAAE1B,eAAe;MAAEK,KAAK;MAAEiB,QAAQ;MAAEC;IAAO,CAAE;IAAAzB,QAAA,EACrEA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAAC/B,EAAA,CAlEeF,YAAY;AAAAkC,EAAA,GAAZlC,YAAY;AAoE5B,OAAO,SAASmC,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACtB,OAAO9C,UAAU,CAACS,WAAW,CAAC;AAClC;AAACqC,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}